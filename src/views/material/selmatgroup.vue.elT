<template>
  <div class="app-container">
    <el-backtop :bottom="100" />
    <div class="div1">
      <li><el-input v-model="listQuery.search" size="mini" prefix-icon="el-icon-search" clearable placeholder="查找" /></li>
      <li><el-button type="primary" size="mini" icon="el-icon-search" @click="btnSearch" /></li>
      <li><el-button type="primary" icon="el-icon-plus" size="mini" @click="btnAddData">新增</el-button></li>
      <li><el-button type="primary" icon="el-icon-document" size="mini" @click="btnSaveData">保存</el-button></li>
      <li><el-button type="primary" icon="el-icon-refresh" size="mini" @click="btnReset">重置</el-button></li>
      <li><upload-excel action="/doorinner/import" :on-success="onExcelSuccess" :visible="true" /></li>
    </div>
    <el-table
      id="table1"
      ref="table1"
      v-loading="listLoading"
      v-el-table-infinite-scroll="fetchData"
      :data="datas"
      :row-style="rowStyle"
      height="85vh"
      element-loading-text="Loading"
      border
      fit
      highlight-current-row
    >
      <el-table-column align="center" label="ID" width="50">
        <template slot-scope="scope">
          <router-link :to="`/kitsun/material/selobj/1/spzp,${scope.row.obj_name}`" target="_blank">
            {{ scope.$index + 1 }}
          </router-link>
        </template>
      </el-table-column>
      <el-table-column align="center" label="物体名" width="200">
        <template slot-scope="{row}">
          <input v-model="row.obj_name" type="text" @input="onInput(row)" @keyup.enter="onSubmit">
          <span>{{ row.obj_name }}</span>
        </template>
      </el-table-column>
      <el-table-column align="center" label="材料" width="400">
        <template slot-scope="{row}">
          <multi-mat-list :data="row.mat_list" :on-change="onMatListChange.bind(null, row)" />
        </template>
      </el-table-column>
      <el-table-column label="操作" align="center" width="100" class-name="mini-padding fixed-width">
        <template slot-scope="{row,$index}">
          <el-button
            v-if="row.status!='deleted'"
            size="mini"
            type="danger"
            icon="el-icon-delete"
            @click="onDelete(row,$index)"
          />
        </template>
      </el-table-column>
    </el-table>
  </div>
</template>

<script>
import elTableInfiniteScroll from 'el-table-infinite-scroll'
import { deleteSelMatGroup, updateSelMatGroup, getSelMatGroup } from '@/api/material'
import { editDelete, confirmEdit } from '@/utils/edit'
import MultiMatList from '@/components/MultiMatList'

export default {
  directives: {
    'el-table-infinite-scroll': elTableInfiniteScroll
  },
  components: { MultiMatList },
  data() {
    return {
      listLoading: false,
      datas: [],
      // 翻页参数
      listQuery: {
        page: 1,
        per_page: 20,
        search: undefined
      },
      total: 0
    }
  },
  computed: {
  },
  created() {
    this.fetchData(false)
  },
  methods: {
    async fetchData(nextpage = true) {
      if (!nextpage) {
        this.listLoading = true
      }

      this.listQuery.page = nextpage ? this.listQuery.page + 1 : 1
      const { data } = await getSelMatGroup(this.listQuery)
      data.items.forEach(el => {
        el.changed = false
      })
      this.datas = nextpage ? this.datas.concat(data.items) : data.items
      this.total = data.total

      if (!nextpage) {
        this.listLoading = false
      }
    },
    onDelete(row, index) {
      editDelete(() => {
        if (row.id) {
          this.listLoading = true
          deleteSelMatGroup(row.id)
            .then(response => {
              this.$notify.deleteOk()
              this.datas.splice(index, 1)
              this.listLoading = false
            })
            .catch(() => {
              this.listLoading = false
            })
        } else {
          this.datas.splice(index, 1)
        }
      })
    },
    btnAddData() {
      var newRow = { id: null, changed: true, obj_name: '', obj_name_en: '' }
      this.datas.unshift(newRow)
      this.$refs.table1.setCurrentRow(this.datas[0])
    },
    onInput(row) {
      row.changed = true
    },
    onSubmit() {
      this.$refs.table1.setCurrentRow()
    },
    rowStyle({ row, rowIndex }) {
      return row.changed ? { 'background-color': 'PeachPuff' } : ''
    },
    onMatListChange(row) {
      row.changed = true
    },
    btnReset() {
      this.listQuery.search = ''
      this.fetchData(false)
    },
    btnSaveData(row, index) {
      const editedArr = this.datas.filter(item => item.changed)
      if (editedArr.length > 0) {
        confirmEdit(() => {
          this.listLoading = true
          updateSelMatGroup(editedArr)
            .then(response => {
              this.listLoading = false
              this.$message.editOk()
              this.fetchData(false)
              this.selRow = false
            })
            .catch(() => {
              this.listLoading = false
              this.$notify.editError()
            })
        })
      }
    },
    btnSearch() {
      this.fetchData(false)
    }
  }
}
</script>

<style scoped>
.div1{
    height: 50px;
    line-height: 50px;
  }
.div1 li{
  margin-right: 20px;
  list-style-type: none;
  float: left;
}
#table1{
  margin: 15px 0 100px 0;
}
#table1 input {
  font-size: 12px;
  display: block;
  width: 100%;
  height: 28px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin: 3px 0;
  padding: 6px 2px;
  transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  display: none;
}
#table1 input:focus {
  border-color: #66afe9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102,175,233,.6);
  outline: 0px;
}
#table1 .current-row input {
  display: block
}
#table1 .current-row input+span {
  display: none
}
</style>
